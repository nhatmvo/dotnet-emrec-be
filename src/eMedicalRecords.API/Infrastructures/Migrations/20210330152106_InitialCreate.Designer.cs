// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eMedicalRecords.Infrastructure;

namespace eMedicalRecords.Infrastructure.Migrations
{
    [DbContext(typeof(MedicalRecordContext))]
    [Migration("20210330152106_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("_createdDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("_updatedDate")
                        .HasColumnName("updated_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("mr_documents");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<Guid>("_headingSetId")
                        .HasColumnName("heading_set_id")
                        .HasColumnType("uuid");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Guid>("_templateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("_templateId");

                    b.ToTable("mr_entries");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.EntryData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EntryId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("_entryId")
                        .HasColumnName("entry_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("_sectionId")
                        .HasColumnName("section_id")
                        .HasColumnType("uuid");

                    b.Property<string>("_value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntryId1");

                    b.HasIndex("_entryId");

                    b.HasIndex("_sectionId");

                    b.ToTable("mre_entry_data");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.PatientAggregate.IdentityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("identity_type");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.PatientAggregate.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int?>("IdentityTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("PatientNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("_dateOfBirth")
                        .HasColumnName("date_of_birth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("_email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("_firstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<bool>("_hasInsurance")
                        .HasColumnName("has_insurance")
                        .HasColumnType("boolean");

                    b.Property<string>("_identityNo")
                        .IsRequired()
                        .HasColumnName("identity_no")
                        .HasColumnType("text");

                    b.Property<string>("_lastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<string>("_middleName")
                        .HasColumnName("middle_name")
                        .HasColumnType("text");

                    b.Property<string>("_phoneNumber")
                        .IsRequired()
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityTypeId");

                    b.HasIndex("PatientNo")
                        .IsUnique();

                    b.HasIndex("_identityNo")
                        .IsUnique();

                    b.ToTable("patients");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Control", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Guid>("_recordAttributeId")
                        .HasColumnName("record_attribute_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("_recordAttributeId");

                    b.ToTable("mre_control");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ControlType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("control_types");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<int>("_controlTypeId")
                        .HasColumnName("control_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("_description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<List<string>>("_options")
                        .HasColumnName("options")
                        .HasColumnType("text[]");

                    b.Property<Guid?>("_parentSectionId")
                        .HasColumnName("parent_section_id")
                        .HasColumnType("uuid");

                    b.Property<string>("_tooltip")
                        .HasColumnName("tooltip")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("_controlTypeId");

                    b.HasIndex("_parentSectionId");

                    b.ToTable("mre_sections");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<bool>("_isDefault")
                        .HasColumnName("is_default")
                        .HasColumnType("boolean");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("mre_template");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Entry", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Document", null)
                        .WithMany("DocumentEntries")
                        .HasForeignKey("DocumentId");

                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Template", null)
                        .WithMany()
                        .HasForeignKey("_templateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.EntryData", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Entry", null)
                        .WithMany("RecordValues")
                        .HasForeignKey("EntryId1");

                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("_entryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Section", null)
                        .WithMany()
                        .HasForeignKey("_sectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.PatientAggregate.Patient", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.PatientAggregate.IdentityType", "IdentityType")
                        .WithMany()
                        .HasForeignKey("IdentityTypeId");

                    b.OwnsOne("eMedicalRecords.Domain.AggregatesModel.PatientAggregate.PatientAddress", "PatientAddress", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.HasKey("PatientId");

                            b1.ToTable("patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Control", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Section", "Section")
                        .WithMany()
                        .HasForeignKey("_recordAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Section", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Template", null)
                        .WithMany("Sections")
                        .HasForeignKey("TemplateId");

                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ControlType", "ControlType")
                        .WithMany()
                        .HasForeignKey("_controlTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Section", null)
                        .WithMany("ChildSections")
                        .HasForeignKey("_parentSectionId");
                });
#pragma warning restore 612, 618
        }
    }
}
