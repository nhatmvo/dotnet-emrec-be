// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eMedicalRecords.Infrastructure;

namespace eMedicalRecords.Infrastructure.Migrations
{
    [DbContext(typeof(MedicalRecordContext))]
    [Migration("20210620084108_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("_createdDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("_updatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("document");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("_headingSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("heading_set_id");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("_templateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("_templateId");

                    b.ToTable("document_entry");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.EntryData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("EntryId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("_entryId")
                        .HasColumnType("uuid")
                        .HasColumnName("entry_id");

                    b.Property<Guid>("_sectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.Property<string>("_value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("EntryId1");

                    b.HasIndex("_entryId");

                    b.HasIndex("_sectionId");

                    b.ToTable("document_entry_data");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.PatientAggregate.IdentityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("identity_type");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.PatientAggregate.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("IdentityTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("PatientNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("_dateOfBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("_email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("_firstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("_hasInsurance")
                        .HasColumnType("boolean")
                        .HasColumnName("has_insurance");

                    b.Property<string>("_identityNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_no");

                    b.Property<string>("_lastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("_middleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("_phoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex("IdentityTypeId");

                    b.HasIndex("PatientNo")
                        .IsUnique();

                    b.HasIndex("_identityNo")
                        .IsUnique();

                    b.ToTable("patient");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("element_base_id");

                    b.Property<string>("_description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("_elementTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("element_type_id");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("_parentElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_element_id");

                    b.Property<Guid>("_templateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<string>("_tooltip")
                        .HasColumnType("text")
                        .HasColumnName("tooltip");

                    b.HasKey("Id");

                    b.HasIndex("_elementTypeId");

                    b.HasIndex("_parentElementId");

                    b.HasIndex("_templateId");

                    b.ToTable("template_element_base");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("template_element_type");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("_isDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("template");
                });

            modelBuilder.Entity("eMedicalRecords.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.ToTable("request");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementCheckbox", b =>
                {
                    b.HasBaseType("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementBase");

                    b.Property<List<string>>("_options")
                        .HasColumnType("text[]")
                        .HasColumnName("options");

                    b.ToTable("template_element_checkbox");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementRadioButton", b =>
                {
                    b.HasBaseType("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementBase");

                    b.Property<List<string>>("_options")
                        .HasColumnType("text[]")
                        .HasColumnName("options");

                    b.ToTable("template_element_radiobutton");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementText", b =>
                {
                    b.HasBaseType("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementBase");

                    b.Property<string>("_customExpression")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasColumnName("custom_expression");

                    b.Property<int?>("_maximumLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(-1)
                        .HasColumnName("maximum_length");

                    b.Property<int?>("_minimumLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(-1)
                        .HasColumnName("minimum_length");

                    b.Property<int?>("_textRestrictionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(-1)
                        .HasColumnName("text_restriction_level");

                    b.ToTable("template_element_text");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Entry", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Document", null)
                        .WithMany("DocumentEntries")
                        .HasForeignKey("DocumentId");

                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Template", null)
                        .WithMany()
                        .HasForeignKey("_templateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.EntryData", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Entry", null)
                        .WithMany("RecordValues")
                        .HasForeignKey("EntryId1");

                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("_entryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementBase", null)
                        .WithMany()
                        .HasForeignKey("_sectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.PatientAggregate.Patient", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.PatientAggregate.IdentityType", "IdentityType")
                        .WithMany()
                        .HasForeignKey("IdentityTypeId");

                    b.OwnsOne("eMedicalRecords.Domain.AggregatesModel.PatientAggregate.PatientAddress", "PatientAddress", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.HasKey("PatientId");

                            b1.ToTable("patient");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("IdentityType");

                    b.Navigation("PatientAddress");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementBase", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementType", "ElementType")
                        .WithMany()
                        .HasForeignKey("_elementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementBase", null)
                        .WithMany("ChildElements")
                        .HasForeignKey("_parentElementId");

                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Template", null)
                        .WithMany("Elements")
                        .HasForeignKey("_templateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElementType");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementCheckbox", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementBase", null)
                        .WithOne()
                        .HasForeignKey("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementCheckbox", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementRadioButton", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementBase", null)
                        .WithOne()
                        .HasForeignKey("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementRadioButton", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementText", b =>
                {
                    b.HasOne("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementBase", null)
                        .WithOne()
                        .HasForeignKey("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementText", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Document", b =>
                {
                    b.Navigation("DocumentEntries");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.DocumentAggregate.Entry", b =>
                {
                    b.Navigation("RecordValues");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.ElementBase", b =>
                {
                    b.Navigation("ChildElements");
                });

            modelBuilder.Entity("eMedicalRecords.Domain.AggregatesModel.TemplateAggregate.Template", b =>
                {
                    b.Navigation("Elements");
                });
#pragma warning restore 612, 618
        }
    }
}
